{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","handleChange","map","user","key","SearchBox","onChange","type","placeholder","Scroll","props","style","overflow","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","e","searchField","target","value","fetch","then","Response","json","users","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAgBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,iEACX,6BACI,yBAAKC,IAAG,+BAA0BJ,GAAMK,IAAI,iCAEhD,yBAAKF,UAAU,MACX,4BAAMF,EAAN,KACA,2BAAIC,MCOLI,EAdE,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAA2B,EAAnBC,aAExB,OACG,6BAEKD,EAAOE,KAAI,SAAAC,GACP,OACI,kBAAC,EAAD,CAAMC,IAAQD,EAAKV,GAAKA,GAAOU,EAAKV,GAAKC,KAASS,EAAKT,KAAOC,MAAUQ,EAAKR,MAAQM,cAAY,SCItGI,EAbG,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,aAEjB,OACI,yBAAKL,UAAU,OACX,2BACIU,SAAUL,EACVL,UAAU,mCACVW,KAAK,SACLC,YAAY,oBCEbC,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAWC,OAAO,UACtCH,EAAMI,WCmBFC,E,kDAtBX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTC,UAAU,GAHC,E,8DAMDC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAS,M,+BAGP,IACEA,EAAaG,KAAKJ,MAAlBC,SACAH,EAAaM,KAAKV,MAAlBI,SACJ,OAAGG,EACQ,wDAEAH,M,GAlBKQ,aCkDbC,E,kDA7CX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IAMVT,aAAe,SAACuB,GACZ,EAAKH,SAAS,CACVI,YAAaD,EAAEE,OAAOC,SAP1B,EAAKX,MAAQ,CACThB,OAAO,GACPyB,YAAa,IAJF,E,gEAYE,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKX,SAAS,CACVrB,OAASgC,S,+BAMf,IAAD,EACyBZ,KAAKJ,MAA5BhB,EADF,EACEA,OAAQyB,EADV,EACUA,YACTQ,EAAiBjC,EAAOkC,QAAO,SAAAlC,GACjC,OAAOA,EAAON,KAAKyC,cAAcC,SAASX,EAAYU,kBAE1D,OACQnC,EACI,yBAAKJ,UAAU,MACX,4CACA,kBAAC,EAAD,CAAWK,aAAcmB,KAAKnB,eAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUD,OAAQiC,OAI/B,4C,GAxCDX,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.8719ba4e.chunk.js","sourcesContent":[" import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return ( \r\n        <div className=\"bg-light-green dib br3 p3 ma2 md-4 col-md-4 grow bw2 shadow-5\">\r\n            <div>\r\n                <img src={`https://robohash.org/${id}`} alt=\"Scarest moster in the world\"/>\r\n            </div>\r\n            <div className=\"tc\">\r\n                <h2 >{name} </h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots, handleChange }) => {\r\n   \r\n    return (\r\n       <div>\r\n          {\r\n            robots.map(user => { \r\n                return(\r\n                    <Card key = { user.id } id = { user.id } name = { user.name } email = { user.email } handleChange />\r\n                );\r\n            })\r\n           }\r\n        </div>\r\n      );\r\n}\r\nexport default CardList;","import React from 'react';;\r\nconst SearchBox = ({ handleChange }) => {\r\n \r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                onChange={handleChange}\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"Search Robots\" />\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return ( \r\n        <div style={{overflow: 'scroll',  height:'800px'}}>\r\n          {props.children}   \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            hasError: false\r\n         }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError:true\r\n        })\r\n    }\r\n    render() { \r\n        const { hasError } = this.state;\r\n        const { children } = this.props;\r\n            if(hasError){\r\n                return <h1>Oooops. That is not goof</h1>\r\n            } else {\r\n                return children\r\n            }      \r\n    }\r\n}\r\n \r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            robots:[],\r\n            searchField: ''\r\n         }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            searchField: e.target.value\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(Response => Response.json())\r\n            .then(users => {\r\n                this.setState({\r\n                    robots : users\r\n                })\r\n        })\r\n        \r\n    }\r\n    \r\n    render() { \r\n        const {robots, searchField} = this.state\r\n        const filteredRobots = robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase()); \r\n        })\r\n        return (\r\n                robots ?\r\n                    <div className=\"tc\">\r\n                        <h1 >RoboFriends </h1>\r\n                        <SearchBox handleChange={this.handleChange} />\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardList robots={filteredRobots} />\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </div>: (\r\n                   <div>Loading</div>\r\n                )\r\n        )}\r\n    \r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './containers/index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}